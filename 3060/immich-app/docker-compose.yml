name: immich

services:
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:release
    extends:
      file: hwaccel.transcoding.yml
      service: quicksync # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    volumes:
      - ${UPLOAD_LOCATION}/photos:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    # Dont need to bind since we're using a proxy
    # ports:
    #   - 2283:2283
    depends_on:
      - redis
      - database
    restart: always
    healthcheck:
      disable: false

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:release
    extends:
      file: hwaccel.ml.yml
      service: openvino # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference
        #build:
        #context: ../machine-learning
        #dockerfile: Dockerfile
    #      args:
    #- DEVICE=cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference
    # ports:
    #   - 3003:3003
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: always
    healthcheck:
      disable: false

  redis:
    container_name: immich_redis
    image: redis:6.2-alpine@sha256:2ba50e1ac3a0ea17b736ce9db2b0a9f6f8b85d4c27d5f5accc6a416d8f42c6d5
    healthcheck:
      test: redis-cli ping || exit 1
    restart: always

  database:
    container_name: immich_postgres
    image: tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${UPLOAD_LOCATION}/postgres:/var/lib/postgresql/data
      # ports:
      # - 5432:5432
    healthcheck:
      test: pg_isready --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' || exit 1; Chksum="$$(psql --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command:
      [
        'postgres',
        '-c',
        'shared_preload_libraries=vectors.so',
        '-c',
        'search_path="$$user", public, vectors',
        '-c',
        'logging_collector=on',
        '-c',
        'max_wal_size=2GB',
        '-c',
        'shared_buffers=512MB',
        '-c',
        'wal_compression=on',
      ]
    restart: always

  # set IMMICH_METRICS=true in .env to enable metrics
  immich-prometheus:
    container_name: immich_prometheus
    ports:
      - 9090:9090
    image: prom/prometheus@sha256:378f4e03703557d1c6419e6caccf922f96e6d88a530f7431d66a4c4f4b1000fe
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus

  # first login uses admin/admin
  # add data source for http://immich-prometheus:9090 to get started
  immich-grafana:
    container_name: immich_grafana
    command: ['./run.sh', '-disable-reporting']
    ports:
      - 3000:3000
    image: grafana/grafana:11.2.2-ubuntu@sha256:2bef00403c18d27919ff19d64fd6253fa713b3880304e92f69109e14221ac843
    volumes:
      - grafana-data:/var/lib/grafana

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx-proxy
  #   volumes:
  #     - /mnt/nvme/immich-app/nginx/reverse_proxy.conf:/etc/nginx/conf.d/default.conf
  #       #      - /mnt/certificates/certificates/_.aquino.network.issuer.crt:/etc/nginx/cert/_.aquino.network.issuer.crt
  #       #      - /mnt/certificates/certificates/_.aquino.network.crt:/etc/nginx/cert/_.aquino.network.crt
  #       #      - /mnt/certificates/certificates/_.aquino.network.key:/etc/nginx/cert/_.aquino.network.key
  #       # - /mnt/certificates/certificates:/etc/nginx/cert/
  #     - certs:/etc/nginx/cert/
  #   ports:
  #     - 80:80
  #     - 443:443
  #   networks:
  #     exposed:
  #         ipv4_address: 192.168.23.100
  #     default:
  #         aliases:
  #           - immich
  #   links:
  #     - immich-server
  #   depends_on:
  #     - immich-server
  #   restart: always

volumes:
  model-cache:
  prometheus-data:
  grafana-data:
  # If it fails to mount on reboot run "systemctl enable systemd-networkd-wait-online.service"
  # certs:
  #   driver: local
  #   driver_opts:
  #     type: nfs
  #     o: addr=192.168.22.19,ro,nfsvers=4,nolock,soft
  #     device: :/secrets/certificates

networks:
  default:
    name: aquinet
    external: true
  # exposed:
  #   name: immich_exposed
  #   driver: ipvlan  
  #   ipam:
  #     driver: default
  #     config: 
  #       - subnet: "192.168.22.0/23"
  #         gateway: "192.168.22.1"
  #   driver_opts:
  #     parent: enp1s0
